/* @ts-nocheck */
/* eslint-disable */
/* @noformat */
/* @formatter:off */
/**
* Generated by ng-openapi
* Generated Angular service for ProgrammingLanguages controller
* Do not edit this file manually
*/
import { HttpClient, HttpContext, HttpContextToken, HttpEvent, HttpResponse } from "@angular/common/http";
import { inject, Injectable } from "@angular/core";
import { Observable } from "rxjs";
import { ObjectResponseDTO, ProgrammingLanguageCreateDTO, ProgrammingLanguageResponseDTOListResponseDTO, ProgrammingLanguageResponseDTOResponseDTO, ProgrammingLanguageUpdateDTO, RequestOptions, UserProgrammingLanguageDTO } from "../models";
import { BASE_PATH_DEFAULT, CLIENT_CONTEXT_TOKEN_DEFAULT } from "../tokens";

@Injectable({ providedIn: "root" })
export class ProgrammingLanguagesService {
    private readonly httpClient: HttpClient = inject(HttpClient);
    private readonly basePath: string = inject(BASE_PATH_DEFAULT);
    private readonly clientContextToken: HttpContextToken<string> = CLIENT_CONTEXT_TOKEN_DEFAULT;

    private createContextWithClientId(existingContext?: HttpContext): HttpContext {
        const context = existingContext || new HttpContext();
        return context.set(this.clientContextToken, 'default');
    }

    programminglanguagesAllGet(observe?: 'body', options?: RequestOptions<'json'>): Observable<ProgrammingLanguageResponseDTOListResponseDTO>;
    programminglanguagesAllGet(observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<ProgrammingLanguageResponseDTOListResponseDTO>>;
    programminglanguagesAllGet(observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<ProgrammingLanguageResponseDTOListResponseDTO>>;
    programminglanguagesAllGet(observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/programminglanguages/all`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.get(url, requestOptions);
    }

    programminglanguagesIdGet(id: string, observe?: 'body', options?: RequestOptions<'json'>): Observable<ProgrammingLanguageResponseDTOResponseDTO>;
    programminglanguagesIdGet(id: string, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<ProgrammingLanguageResponseDTOResponseDTO>>;
    programminglanguagesIdGet(id: string, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<ProgrammingLanguageResponseDTOResponseDTO>>;
    programminglanguagesIdGet(id: string, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/programminglanguages/${id}`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.get(url, requestOptions);
    }

    programminglanguagesUserUserIdGet(userId: string, observe?: 'body', options?: RequestOptions<'json'>): Observable<ProgrammingLanguageResponseDTOListResponseDTO>;
    programminglanguagesUserUserIdGet(userId: string, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<ProgrammingLanguageResponseDTOListResponseDTO>>;
    programminglanguagesUserUserIdGet(userId: string, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<ProgrammingLanguageResponseDTOListResponseDTO>>;
    programminglanguagesUserUserIdGet(userId: string, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/programminglanguages/user/${userId}`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.get(url, requestOptions);
    }

    programminglanguagesCreatePost(programmingLanguageCreateDTO?: ProgrammingLanguageCreateDTO, observe?: 'body', options?: RequestOptions<'json'>): Observable<ProgrammingLanguageResponseDTOResponseDTO>;
    programminglanguagesCreatePost(programmingLanguageCreateDTO?: ProgrammingLanguageCreateDTO, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<ProgrammingLanguageResponseDTOResponseDTO>>;
    programminglanguagesCreatePost(programmingLanguageCreateDTO?: ProgrammingLanguageCreateDTO, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<ProgrammingLanguageResponseDTOResponseDTO>>;
    programminglanguagesCreatePost(programmingLanguageCreateDTO?: ProgrammingLanguageCreateDTO, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/programminglanguages/create`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.post(url, programmingLanguageCreateDTO, requestOptions);
    }

    programminglanguagesUpdateIdPut(id: string, programmingLanguageUpdateDTO?: ProgrammingLanguageUpdateDTO, observe?: 'body', options?: RequestOptions<'json'>): Observable<ProgrammingLanguageResponseDTOResponseDTO>;
    programminglanguagesUpdateIdPut(id: string, programmingLanguageUpdateDTO?: ProgrammingLanguageUpdateDTO, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<ProgrammingLanguageResponseDTOResponseDTO>>;
    programminglanguagesUpdateIdPut(id: string, programmingLanguageUpdateDTO?: ProgrammingLanguageUpdateDTO, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<ProgrammingLanguageResponseDTOResponseDTO>>;
    programminglanguagesUpdateIdPut(id: string, programmingLanguageUpdateDTO?: ProgrammingLanguageUpdateDTO, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/programminglanguages/update/${id}`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.put(url, programmingLanguageUpdateDTO, requestOptions);
    }

    programminglanguagesDeleteIdDelete(id: string, observe?: 'body', options?: RequestOptions<'json'>): Observable<ObjectResponseDTO>;
    programminglanguagesDeleteIdDelete(id: string, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<ObjectResponseDTO>>;
    programminglanguagesDeleteIdDelete(id: string, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<ObjectResponseDTO>>;
    programminglanguagesDeleteIdDelete(id: string, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/programminglanguages/delete/${id}`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.delete(url, requestOptions);
    }

    programminglanguagesUserAddPost(userProgrammingLanguageDTO?: UserProgrammingLanguageDTO, observe?: 'body', options?: RequestOptions<'json'>): Observable<ObjectResponseDTO>;
    programminglanguagesUserAddPost(userProgrammingLanguageDTO?: UserProgrammingLanguageDTO, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<ObjectResponseDTO>>;
    programminglanguagesUserAddPost(userProgrammingLanguageDTO?: UserProgrammingLanguageDTO, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<ObjectResponseDTO>>;
    programminglanguagesUserAddPost(userProgrammingLanguageDTO?: UserProgrammingLanguageDTO, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/programminglanguages/user/add`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.post(url, userProgrammingLanguageDTO, requestOptions);
    }

    programminglanguagesUserRemovePost(userProgrammingLanguageDTO?: UserProgrammingLanguageDTO, observe?: 'body', options?: RequestOptions<'json'>): Observable<ObjectResponseDTO>;
    programminglanguagesUserRemovePost(userProgrammingLanguageDTO?: UserProgrammingLanguageDTO, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<ObjectResponseDTO>>;
    programminglanguagesUserRemovePost(userProgrammingLanguageDTO?: UserProgrammingLanguageDTO, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<ObjectResponseDTO>>;
    programminglanguagesUserRemovePost(userProgrammingLanguageDTO?: UserProgrammingLanguageDTO, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/programminglanguages/user/remove`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.post(url, userProgrammingLanguageDTO, requestOptions);
    }
}
