/* @ts-nocheck */
/* eslint-disable */
/* @noformat */
/* @formatter:off */
/**
* Generated by ng-openapi
* Generated Angular service for FakeData controller
* Do not edit this file manually
*/
import { HttpClient, HttpContext, HttpContextToken, HttpEvent, HttpParams, HttpResponse } from "@angular/common/http";
import { inject, Injectable } from "@angular/core";
import { Observable } from "rxjs";
import { ObjectResponseDTO, RequestOptions } from "../models";
import { BASE_PATH_DEFAULT, CLIENT_CONTEXT_TOKEN_DEFAULT } from "../tokens";
import { HttpParamsBuilder } from "../utils/http-params-builder";

@Injectable({ providedIn: "root" })
export class FakeDataService {
    private readonly httpClient: HttpClient = inject(HttpClient);
    private readonly basePath: string = inject(BASE_PATH_DEFAULT);
    private readonly clientContextToken: HttpContextToken<string> = CLIENT_CONTEXT_TOKEN_DEFAULT;

    private createContextWithClientId(existingContext?: HttpContext): HttpContext {
        const context = existingContext || new HttpContext();
        return context.set(this.clientContextToken, 'default');
    }

    fakedataUsersPost(count?: number, observe?: 'body', options?: RequestOptions<'json'>): Observable<ObjectResponseDTO>;
    fakedataUsersPost(count?: number, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<ObjectResponseDTO>>;
    fakedataUsersPost(count?: number, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<ObjectResponseDTO>>;
    fakedataUsersPost(count?: number, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/fakedata/users`;

        let params = new HttpParams();
        if (count != null) {
            params = HttpParamsBuilder.addToHttpParams(params, count, 'count');
        }

        const requestOptions: any = {
            observe: observe as any,
            params,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.post(url, null, requestOptions);
    }

    fakedataAddressesPost(addressesPerUser?: number, observe?: 'body', options?: RequestOptions<'json'>): Observable<ObjectResponseDTO>;
    fakedataAddressesPost(addressesPerUser?: number, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<ObjectResponseDTO>>;
    fakedataAddressesPost(addressesPerUser?: number, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<ObjectResponseDTO>>;
    fakedataAddressesPost(addressesPerUser?: number, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/fakedata/addresses`;

        let params = new HttpParams();
        if (addressesPerUser != null) {
            params = HttpParamsBuilder.addToHttpParams(params, addressesPerUser, 'addressesPerUser');
        }

        const requestOptions: any = {
            observe: observe as any,
            params,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.post(url, null, requestOptions);
    }

    fakedataTypeSlotsPost(count?: number, observe?: 'body', options?: RequestOptions<'json'>): Observable<ObjectResponseDTO>;
    fakedataTypeSlotsPost(count?: number, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<ObjectResponseDTO>>;
    fakedataTypeSlotsPost(count?: number, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<ObjectResponseDTO>>;
    fakedataTypeSlotsPost(count?: number, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/fakedata/type-slots`;

        let params = new HttpParams();
        if (count != null) {
            params = HttpParamsBuilder.addToHttpParams(params, count, 'count');
        }

        const requestOptions: any = {
            observe: observe as any,
            params,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.post(url, null, requestOptions);
    }

    fakedataSlotsPost(slotsPerTeacher?: number, observe?: 'body', options?: RequestOptions<'json'>): Observable<ObjectResponseDTO>;
    fakedataSlotsPost(slotsPerTeacher?: number, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<ObjectResponseDTO>>;
    fakedataSlotsPost(slotsPerTeacher?: number, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<ObjectResponseDTO>>;
    fakedataSlotsPost(slotsPerTeacher?: number, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/fakedata/slots`;

        let params = new HttpParams();
        if (slotsPerTeacher != null) {
            params = HttpParamsBuilder.addToHttpParams(params, slotsPerTeacher, 'slotsPerTeacher');
        }

        const requestOptions: any = {
            observe: observe as any,
            params,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.post(url, null, requestOptions);
    }

    fakedataAllPost(observe?: 'body', options?: RequestOptions<'json'>): Observable<ObjectResponseDTO>;
    fakedataAllPost(observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<ObjectResponseDTO>>;
    fakedataAllPost(observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<ObjectResponseDTO>>;
    fakedataAllPost(observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/fakedata/all`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.post(url, null, requestOptions);
    }

    fakedataClearDelete(observe?: 'body', options?: RequestOptions<'json'>): Observable<ObjectResponseDTO>;
    fakedataClearDelete(observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<ObjectResponseDTO>>;
    fakedataClearDelete(observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<ObjectResponseDTO>>;
    fakedataClearDelete(observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/fakedata/clear`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.delete(url, requestOptions);
    }
}
