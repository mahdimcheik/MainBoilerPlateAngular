/* @ts-nocheck */
/* eslint-disable */
/* @noformat */
/* @formatter:off */
/**
* Generated by ng-openapi
* Generated Angular service for Languages controller
* Do not edit this file manually
*/
import { HttpClient, HttpContext, HttpContextToken, HttpEvent, HttpResponse } from "@angular/common/http";
import { inject, Injectable } from "@angular/core";
import { Observable } from "rxjs";
import { LanguageCreateDTO, LanguageResponseDTOListResponseDTO, LanguageResponseDTOResponseDTO, LanguageUpdateDTO, ObjectResponseDTO, RequestOptions, UserLanguageDTO } from "../models";
import { BASE_PATH_DEFAULT, CLIENT_CONTEXT_TOKEN_DEFAULT } from "../tokens";

@Injectable({ providedIn: "root" })
export class LanguagesService {
    private readonly httpClient: HttpClient = inject(HttpClient);
    private readonly basePath: string = inject(BASE_PATH_DEFAULT);
    private readonly clientContextToken: HttpContextToken<string> = CLIENT_CONTEXT_TOKEN_DEFAULT;

    private createContextWithClientId(existingContext?: HttpContext): HttpContext {
        const context = existingContext || new HttpContext();
        return context.set(this.clientContextToken, 'default');
    }

    languagesAllGet(observe?: 'body', options?: RequestOptions<'json'>): Observable<LanguageResponseDTOListResponseDTO>;
    languagesAllGet(observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<LanguageResponseDTOListResponseDTO>>;
    languagesAllGet(observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<LanguageResponseDTOListResponseDTO>>;
    languagesAllGet(observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/languages/all`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.get(url, requestOptions);
    }

    languagesIdGet(id: string, observe?: 'body', options?: RequestOptions<'json'>): Observable<LanguageResponseDTOResponseDTO>;
    languagesIdGet(id: string, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<LanguageResponseDTOResponseDTO>>;
    languagesIdGet(id: string, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<LanguageResponseDTOResponseDTO>>;
    languagesIdGet(id: string, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/languages/${id}`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.get(url, requestOptions);
    }

    languagesUserUserIdGet(userId: string, observe?: 'body', options?: RequestOptions<'json'>): Observable<LanguageResponseDTOListResponseDTO>;
    languagesUserUserIdGet(userId: string, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<LanguageResponseDTOListResponseDTO>>;
    languagesUserUserIdGet(userId: string, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<LanguageResponseDTOListResponseDTO>>;
    languagesUserUserIdGet(userId: string, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/languages/user/${userId}`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.get(url, requestOptions);
    }

    languagesCreatePost(languageCreateDTO?: LanguageCreateDTO, observe?: 'body', options?: RequestOptions<'json'>): Observable<LanguageResponseDTOResponseDTO>;
    languagesCreatePost(languageCreateDTO?: LanguageCreateDTO, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<LanguageResponseDTOResponseDTO>>;
    languagesCreatePost(languageCreateDTO?: LanguageCreateDTO, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<LanguageResponseDTOResponseDTO>>;
    languagesCreatePost(languageCreateDTO?: LanguageCreateDTO, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/languages/create`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.post(url, languageCreateDTO, requestOptions);
    }

    languagesUpdateIdPut(id: string, languageUpdateDTO?: LanguageUpdateDTO, observe?: 'body', options?: RequestOptions<'json'>): Observable<LanguageResponseDTOResponseDTO>;
    languagesUpdateIdPut(id: string, languageUpdateDTO?: LanguageUpdateDTO, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<LanguageResponseDTOResponseDTO>>;
    languagesUpdateIdPut(id: string, languageUpdateDTO?: LanguageUpdateDTO, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<LanguageResponseDTOResponseDTO>>;
    languagesUpdateIdPut(id: string, languageUpdateDTO?: LanguageUpdateDTO, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/languages/update/${id}`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.put(url, languageUpdateDTO, requestOptions);
    }

    languagesDeleteIdDelete(id: string, observe?: 'body', options?: RequestOptions<'json'>): Observable<ObjectResponseDTO>;
    languagesDeleteIdDelete(id: string, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<ObjectResponseDTO>>;
    languagesDeleteIdDelete(id: string, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<ObjectResponseDTO>>;
    languagesDeleteIdDelete(id: string, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/languages/delete/${id}`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.delete(url, requestOptions);
    }

    languagesUserAddPost(userLanguageDTO?: UserLanguageDTO, observe?: 'body', options?: RequestOptions<'json'>): Observable<ObjectResponseDTO>;
    languagesUserAddPost(userLanguageDTO?: UserLanguageDTO, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<ObjectResponseDTO>>;
    languagesUserAddPost(userLanguageDTO?: UserLanguageDTO, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<ObjectResponseDTO>>;
    languagesUserAddPost(userLanguageDTO?: UserLanguageDTO, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/languages/user/add`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.post(url, userLanguageDTO, requestOptions);
    }

    languagesUserUpdateLanguagesPost(requestBody?: string[], observe?: 'body', options?: RequestOptions<'json'>): Observable<ObjectResponseDTO>;
    languagesUserUpdateLanguagesPost(requestBody?: string[], observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<ObjectResponseDTO>>;
    languagesUserUpdateLanguagesPost(requestBody?: string[], observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<ObjectResponseDTO>>;
    languagesUserUpdateLanguagesPost(requestBody?: string[], observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/languages/user/update-languages`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.post(url, requestBody, requestOptions);
    }

    languagesUserRemovePost(userLanguageDTO?: UserLanguageDTO, observe?: 'body', options?: RequestOptions<'json'>): Observable<ObjectResponseDTO>;
    languagesUserRemovePost(userLanguageDTO?: UserLanguageDTO, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<ObjectResponseDTO>>;
    languagesUserRemovePost(userLanguageDTO?: UserLanguageDTO, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<ObjectResponseDTO>>;
    languagesUserRemovePost(userLanguageDTO?: UserLanguageDTO, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/languages/user/remove`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.post(url, userLanguageDTO, requestOptions);
    }
}
