/* @ts-nocheck */
/* eslint-disable */
/* @noformat */
/* @formatter:off */
/**
* Generated by ng-openapi
* Generated Angular service for Cursus controller
* Do not edit this file manually
*/
import { HttpClient, HttpContext, HttpContextToken, HttpEvent, HttpResponse } from "@angular/common/http";
import { inject, Injectable } from "@angular/core";
import { Observable } from "rxjs";
import { CursusCategoryDTO, CursusCreateDTO, CursusDynamicFilters, CursusResponseDTOListResponseDTO, CursusResponseDTOResponseDTO, CursusUpdateDTO, ObjectResponseDTO, RequestOptions } from "../models";
import { BASE_PATH_DEFAULT, CLIENT_CONTEXT_TOKEN_DEFAULT } from "../tokens";

@Injectable({ providedIn: "root" })
export class CursusService {
    private readonly httpClient: HttpClient = inject(HttpClient);
    private readonly basePath: string = inject(BASE_PATH_DEFAULT);
    private readonly clientContextToken: HttpContextToken<string> = CLIENT_CONTEXT_TOKEN_DEFAULT;

    private createContextWithClientId(existingContext?: HttpContext): HttpContext {
        const context = existingContext || new HttpContext();
        return context.set(this.clientContextToken, 'default');
    }

    cursusAllGet(observe?: 'body', options?: RequestOptions<'json'>): Observable<CursusResponseDTOListResponseDTO>;
    cursusAllGet(observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<CursusResponseDTOListResponseDTO>>;
    cursusAllGet(observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<CursusResponseDTOListResponseDTO>>;
    cursusAllGet(observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/cursus/all`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.get(url, requestOptions);
    }

    cursusAllPaginatedPost(cursusDynamicFilters?: CursusDynamicFilters, observe?: 'body', options?: RequestOptions<'json'>): Observable<CursusResponseDTOListResponseDTO>;
    cursusAllPaginatedPost(cursusDynamicFilters?: CursusDynamicFilters, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<CursusResponseDTOListResponseDTO>>;
    cursusAllPaginatedPost(cursusDynamicFilters?: CursusDynamicFilters, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<CursusResponseDTOListResponseDTO>>;
    cursusAllPaginatedPost(cursusDynamicFilters?: CursusDynamicFilters, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/cursus/all-paginated`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.post(url, cursusDynamicFilters, requestOptions);
    }

    cursusIdGet(id: string, observe?: 'body', options?: RequestOptions<'json'>): Observable<CursusResponseDTOResponseDTO>;
    cursusIdGet(id: string, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<CursusResponseDTOResponseDTO>>;
    cursusIdGet(id: string, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<CursusResponseDTOResponseDTO>>;
    cursusIdGet(id: string, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/cursus/${id}`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.get(url, requestOptions);
    }

    cursusTeacherTeacherIdGet(teacherId: string, observe?: 'body', options?: RequestOptions<'json'>): Observable<CursusResponseDTOListResponseDTO>;
    cursusTeacherTeacherIdGet(teacherId: string, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<CursusResponseDTOListResponseDTO>>;
    cursusTeacherTeacherIdGet(teacherId: string, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<CursusResponseDTOListResponseDTO>>;
    cursusTeacherTeacherIdGet(teacherId: string, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/cursus/teacher/${teacherId}`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.get(url, requestOptions);
    }

    cursusLevelLevelIdGet(levelId: string, observe?: 'body', options?: RequestOptions<'json'>): Observable<CursusResponseDTOListResponseDTO>;
    cursusLevelLevelIdGet(levelId: string, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<CursusResponseDTOListResponseDTO>>;
    cursusLevelLevelIdGet(levelId: string, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<CursusResponseDTOListResponseDTO>>;
    cursusLevelLevelIdGet(levelId: string, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/cursus/level/${levelId}`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.get(url, requestOptions);
    }

    cursusCreatePost(cursusCreateDTO?: CursusCreateDTO, observe?: 'body', options?: RequestOptions<'json'>): Observable<CursusResponseDTOResponseDTO>;
    cursusCreatePost(cursusCreateDTO?: CursusCreateDTO, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<CursusResponseDTOResponseDTO>>;
    cursusCreatePost(cursusCreateDTO?: CursusCreateDTO, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<CursusResponseDTOResponseDTO>>;
    cursusCreatePost(cursusCreateDTO?: CursusCreateDTO, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/cursus/create`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.post(url, cursusCreateDTO, requestOptions);
    }

    cursusUpdateIdPut(id: string, cursusUpdateDTO?: CursusUpdateDTO, observe?: 'body', options?: RequestOptions<'json'>): Observable<CursusResponseDTOResponseDTO>;
    cursusUpdateIdPut(id: string, cursusUpdateDTO?: CursusUpdateDTO, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<CursusResponseDTOResponseDTO>>;
    cursusUpdateIdPut(id: string, cursusUpdateDTO?: CursusUpdateDTO, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<CursusResponseDTOResponseDTO>>;
    cursusUpdateIdPut(id: string, cursusUpdateDTO?: CursusUpdateDTO, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/cursus/update/${id}`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.put(url, cursusUpdateDTO, requestOptions);
    }

    cursusDeleteIdDelete(id: string, observe?: 'body', options?: RequestOptions<'json'>): Observable<ObjectResponseDTO>;
    cursusDeleteIdDelete(id: string, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<ObjectResponseDTO>>;
    cursusDeleteIdDelete(id: string, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<ObjectResponseDTO>>;
    cursusDeleteIdDelete(id: string, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/cursus/delete/${id}`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.delete(url, requestOptions);
    }

    cursusCategoryAddPost(cursusCategoryDTO?: CursusCategoryDTO, observe?: 'body', options?: RequestOptions<'json'>): Observable<ObjectResponseDTO>;
    cursusCategoryAddPost(cursusCategoryDTO?: CursusCategoryDTO, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<ObjectResponseDTO>>;
    cursusCategoryAddPost(cursusCategoryDTO?: CursusCategoryDTO, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<ObjectResponseDTO>>;
    cursusCategoryAddPost(cursusCategoryDTO?: CursusCategoryDTO, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/cursus/category/add`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.post(url, cursusCategoryDTO, requestOptions);
    }

    cursusCategoryRemovePost(cursusCategoryDTO?: CursusCategoryDTO, observe?: 'body', options?: RequestOptions<'json'>): Observable<ObjectResponseDTO>;
    cursusCategoryRemovePost(cursusCategoryDTO?: CursusCategoryDTO, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<ObjectResponseDTO>>;
    cursusCategoryRemovePost(cursusCategoryDTO?: CursusCategoryDTO, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<ObjectResponseDTO>>;
    cursusCategoryRemovePost(cursusCategoryDTO?: CursusCategoryDTO, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/cursus/category/remove`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.post(url, cursusCategoryDTO, requestOptions);
    }
}
