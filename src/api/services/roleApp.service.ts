/* @ts-nocheck */
/* eslint-disable */
/* @noformat */
/* @formatter:off */
/**
* Generated by ng-openapi
* Generated Angular service for RoleApp controller
* Do not edit this file manually
*/
import { HttpClient, HttpContext, HttpContextToken, HttpEvent, HttpResponse } from "@angular/common/http";
import { inject, Injectable } from "@angular/core";
import { Observable } from "rxjs";
import { Int32ResponseDTO, RequestOptions, RoleAppCreateDTO, RoleAppResponseDTOListResponseDTO, RoleAppResponseDTOResponseDTO, RoleAppUpdateDTO } from "../models";
import { BASE_PATH_DEFAULT, CLIENT_CONTEXT_TOKEN_DEFAULT } from "../tokens";

@Injectable({ providedIn: "root" })
export class RoleAppService {
    private readonly httpClient: HttpClient = inject(HttpClient);
    private readonly basePath: string = inject(BASE_PATH_DEFAULT);
    private readonly clientContextToken: HttpContextToken<string> = CLIENT_CONTEXT_TOKEN_DEFAULT;

    private createContextWithClientId(existingContext?: HttpContext): HttpContext {
        const context = existingContext || new HttpContext();
        return context.set(this.clientContextToken, 'default');
    }

    roleappAllGet(observe?: 'body', options?: RequestOptions<'json'>): Observable<RoleAppResponseDTOListResponseDTO>;
    roleappAllGet(observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<RoleAppResponseDTOListResponseDTO>>;
    roleappAllGet(observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<RoleAppResponseDTOListResponseDTO>>;
    roleappAllGet(observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/roleapp/all`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.get(url, requestOptions);
    }

    roleappIdGet(id: string, observe?: 'body', options?: RequestOptions<'json'>): Observable<RoleAppResponseDTOResponseDTO>;
    roleappIdGet(id: string, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<RoleAppResponseDTOResponseDTO>>;
    roleappIdGet(id: string, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<RoleAppResponseDTOResponseDTO>>;
    roleappIdGet(id: string, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/roleapp/${id}`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.get(url, requestOptions);
    }

    roleappByNameNameGet(name: string, observe?: 'body', options?: RequestOptions<'json'>): Observable<RoleAppResponseDTOResponseDTO>;
    roleappByNameNameGet(name: string, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<RoleAppResponseDTOResponseDTO>>;
    roleappByNameNameGet(name: string, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<RoleAppResponseDTOResponseDTO>>;
    roleappByNameNameGet(name: string, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/roleapp/by-name/${name}`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.get(url, requestOptions);
    }

    roleappCreatePost(roleAppCreateDTO?: RoleAppCreateDTO, observe?: 'body', options?: RequestOptions<'json'>): Observable<RoleAppResponseDTOResponseDTO>;
    roleappCreatePost(roleAppCreateDTO?: RoleAppCreateDTO, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<RoleAppResponseDTOResponseDTO>>;
    roleappCreatePost(roleAppCreateDTO?: RoleAppCreateDTO, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<RoleAppResponseDTOResponseDTO>>;
    roleappCreatePost(roleAppCreateDTO?: RoleAppCreateDTO, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/roleapp/create`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.post(url, roleAppCreateDTO, requestOptions);
    }

    roleappUpdateIdPut(id: string, roleAppUpdateDTO?: RoleAppUpdateDTO, observe?: 'body', options?: RequestOptions<'json'>): Observable<RoleAppResponseDTOResponseDTO>;
    roleappUpdateIdPut(id: string, roleAppUpdateDTO?: RoleAppUpdateDTO, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<RoleAppResponseDTOResponseDTO>>;
    roleappUpdateIdPut(id: string, roleAppUpdateDTO?: RoleAppUpdateDTO, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<RoleAppResponseDTOResponseDTO>>;
    roleappUpdateIdPut(id: string, roleAppUpdateDTO?: RoleAppUpdateDTO, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/roleapp/update/${id}`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.put(url, roleAppUpdateDTO, requestOptions);
    }

    roleappIdUsersCountGet(id: string, observe?: 'body', options?: RequestOptions<'json'>): Observable<Int32ResponseDTO>;
    roleappIdUsersCountGet(id: string, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<Int32ResponseDTO>>;
    roleappIdUsersCountGet(id: string, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<Int32ResponseDTO>>;
    roleappIdUsersCountGet(id: string, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/roleapp/${id}/users-count`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.get(url, requestOptions);
    }
}
