/* @ts-nocheck */
/* eslint-disable */
/* @noformat */
/* @formatter:off */
/**
* Generated by ng-openapi
* Generated Angular service for Auth controller
* Do not edit this file manually
*/
import { HttpClient, HttpContext, HttpContextToken, HttpEvent, HttpParams, HttpResponse } from "@angular/common/http";
import { inject, Injectable } from "@angular/core";
import { Observable } from "rxjs";
import { ForgotPasswordInput, LoginOutputDTO, LoginOutputDTOResponseDTO, PasswordRecoveryInput, PasswordResetResponseDTOResponseDTO, RequestOptions, StringResponseDTO, UserCreateDTO, UserInfosWithtokenResponseDTO, UserLoginDTO, UserResponseDTOResponseDTO, UserUpdateDTO } from "../models";
import { BASE_PATH_DEFAULT, CLIENT_CONTEXT_TOKEN_DEFAULT } from "../tokens";
import { HttpParamsBuilder } from "../utils/http-params-builder";

@Injectable({ providedIn: "root" })
export class AuthService {
    private readonly httpClient: HttpClient = inject(HttpClient);
    private readonly basePath: string = inject(BASE_PATH_DEFAULT);
    private readonly clientContextToken: HttpContextToken<string> = CLIENT_CONTEXT_TOKEN_DEFAULT;

    private createContextWithClientId(existingContext?: HttpContext): HttpContext {
        const context = existingContext || new HttpContext();
        return context.set(this.clientContextToken, 'default');
    }

    authRegisterPost(userCreateDTO?: UserCreateDTO, observe?: 'body', options?: RequestOptions<'json'>): Observable<UserResponseDTOResponseDTO>;
    authRegisterPost(userCreateDTO?: UserCreateDTO, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<UserResponseDTOResponseDTO>>;
    authRegisterPost(userCreateDTO?: UserCreateDTO, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<UserResponseDTOResponseDTO>>;
    authRegisterPost(userCreateDTO?: UserCreateDTO, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/auth/register`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.post(url, userCreateDTO, requestOptions);
    }

    authConfirmStatusGet(userId?: string, observe?: 'body', options?: RequestOptions<'json'>): Observable<UserResponseDTOResponseDTO>;
    authConfirmStatusGet(userId?: string, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<UserResponseDTOResponseDTO>>;
    authConfirmStatusGet(userId?: string, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<UserResponseDTOResponseDTO>>;
    authConfirmStatusGet(userId?: string, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/auth/confirm-status`;

        let params = new HttpParams();
        if (userId != null) {
            params = HttpParamsBuilder.addToHttpParams(params, userId, 'userId');
        }

        const requestOptions: any = {
            observe: observe as any,
            params,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.get(url, requestOptions);
    }

    authUpdatePatch(userUpdateDTO?: UserUpdateDTO, observe?: 'body', options?: RequestOptions<'json'>): Observable<UserResponseDTOResponseDTO>;
    authUpdatePatch(userUpdateDTO?: UserUpdateDTO, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<UserResponseDTOResponseDTO>>;
    authUpdatePatch(userUpdateDTO?: UserUpdateDTO, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<UserResponseDTOResponseDTO>>;
    authUpdatePatch(userUpdateDTO?: UserUpdateDTO, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/auth/update`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.patch(url, userUpdateDTO, requestOptions);
    }

    authLoginPost(userLoginDTO?: UserLoginDTO, observe?: 'body', options?: RequestOptions<'json'>): Observable<LoginOutputDTOResponseDTO>;
    authLoginPost(userLoginDTO?: UserLoginDTO, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<LoginOutputDTOResponseDTO>>;
    authLoginPost(userLoginDTO?: UserLoginDTO, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<LoginOutputDTOResponseDTO>>;
    authLoginPost(userLoginDTO?: UserLoginDTO, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/auth/login`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.post(url, userLoginDTO, requestOptions);
    }

    authEmailConfirmationGet(userId?: string, confirmationToken?: string, observe?: 'body', options?: RequestOptions<'json'>): Observable<StringResponseDTO>;
    authEmailConfirmationGet(userId?: string, confirmationToken?: string, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<StringResponseDTO>>;
    authEmailConfirmationGet(userId?: string, confirmationToken?: string, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<StringResponseDTO>>;
    authEmailConfirmationGet(userId?: string, confirmationToken?: string, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/auth/email-confirmation`;

        let params = new HttpParams();
        if (userId != null) {
            params = HttpParamsBuilder.addToHttpParams(params, userId, 'userId');
        }
        if (confirmationToken != null) {
            params = HttpParamsBuilder.addToHttpParams(params, confirmationToken, 'confirmationToken');
        }

        const requestOptions: any = {
            observe: observe as any,
            params,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.get(url, requestOptions);
    }

    authMyInformationsGet(observe?: 'body', options?: RequestOptions<'json'>): Observable<UserInfosWithtokenResponseDTO>;
    authMyInformationsGet(observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<UserInfosWithtokenResponseDTO>>;
    authMyInformationsGet(observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<UserInfosWithtokenResponseDTO>>;
    authMyInformationsGet(observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/auth/my-informations`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.get(url, requestOptions);
    }

    authForgotPasswordPost(forgotPasswordInput?: ForgotPasswordInput, observe?: 'body', options?: RequestOptions<'json'>): Observable<PasswordResetResponseDTOResponseDTO>;
    authForgotPasswordPost(forgotPasswordInput?: ForgotPasswordInput, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<PasswordResetResponseDTOResponseDTO>>;
    authForgotPasswordPost(forgotPasswordInput?: ForgotPasswordInput, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<PasswordResetResponseDTOResponseDTO>>;
    authForgotPasswordPost(forgotPasswordInput?: ForgotPasswordInput, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/auth/forgot-password`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.post(url, forgotPasswordInput, requestOptions);
    }

    authResetPasswordPost(passwordRecoveryInput?: PasswordRecoveryInput, observe?: 'body', options?: RequestOptions<'json'>): Observable<StringResponseDTO>;
    authResetPasswordPost(passwordRecoveryInput?: PasswordRecoveryInput, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<StringResponseDTO>>;
    authResetPasswordPost(passwordRecoveryInput?: PasswordRecoveryInput, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<StringResponseDTO>>;
    authResetPasswordPost(passwordRecoveryInput?: PasswordRecoveryInput, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/auth/reset-password`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.post(url, passwordRecoveryInput, requestOptions);
    }

    authRefreshTokenGet(observe?: 'body', options?: RequestOptions<'json'>): Observable<LoginOutputDTO>;
    authRefreshTokenGet(observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<LoginOutputDTO>>;
    authRefreshTokenGet(observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<LoginOutputDTO>>;
    authRefreshTokenGet(observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/auth/refresh-token`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.get(url, requestOptions);
    }
}
