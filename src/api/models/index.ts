/* @ts-nocheck */
/* eslint-disable */
/* @noformat */
/* @formatter:off */
/**
* Generated by ng-openapi
* Generated TypeScript interfaces from Swagger specification
* Do not edit this file manually
*/
import { HttpContext, HttpHeaders } from "@angular/common/http";
export interface Address {
    id: string;
    createdAt: Date;
    updatedAt?: Date | null;
    archivedAt?: Date | null;
    street: string;
    city: string;
    state: string;
    country: string;
    zipCode: string;
    additionalInfo?: string | null;
    longitude?: number | null;
    latitude?: number | null;
    userId?: string;
    user?: UserApp;
}

export interface Booking {
    id: string;
    createdAt: Date;
    updatedAt?: Date | null;
    archivedAt?: Date | null;
    title?: string | null;
    description?: string | null;
    slotId?: string;
    slot?: Slot;
    orderId?: string;
    order?: Order;
    studentId?: string;
    student?: UserApp;
}

export interface CategoryCursus {
    id: string;
    createdAt: Date;
    updatedAt?: Date | null;
    archivedAt?: Date | null;
    name: string;
    color: string;
    icon?: string | null;
    cursuses?: Cursus[];
}

export interface Cursus {
    id: string;
    createdAt: Date;
    updatedAt?: Date | null;
    archivedAt?: Date | null;
    name: string;
    color: string;
    icon?: string | null;
    description?: string | null;
    imgUrl?: string | null;
    levelId?: string;
    level?: LevelCursus;
    teacherId?: string;
    teacher?: UserApp;
    categories?: CategoryCursus[];
}

export interface ForgotPasswordInput {
    email: string;
}

export interface Formation {
    id: string;
    createdAt: Date;
    updatedAt?: Date | null;
    archivedAt?: Date | null;
    title: string;
    description: string;
    institution: string;
    dateFrom: Date;
    dateTo?: Date | null;
    userId?: string;
    user?: UserApp;
}

export interface Gender {
    id: string;
    createdAt: Date;
    updatedAt?: Date | null;
    archivedAt?: Date | null;
    name: string;
    color: string;
    icon?: string | null;
}

export interface GenderDTO {
    readonly id: string;
    readonly name: string;
    readonly color: string;
    readonly icon?: string | null;
}

export interface GenderDTOListResponseDTO {
    message: string;
    status: number;
    data?: GenderDTO[];
    count?: number | null;
}

export interface LevelCursus {
    id: string;
    createdAt: Date;
    updatedAt?: Date | null;
    archivedAt?: Date | null;
    name: string;
    color: string;
    icon?: string | null;
}

export interface LoginOutputDTO {
    token: string;
    refreshToken: string;
    user: UserResponseDTO;
}

export interface LoginOutputDTOResponseDTO {
    message: string;
    status: number;
    data?: LoginOutputDTO;
    count?: number | null;
}

export interface Order {
    id: string;
    createdAt: Date;
    updatedAt?: Date | null;
    archivedAt?: Date | null;
    orderNumber?: string | null;
    orderDate?: Date;
    totalAmount?: number;
    reductionPercentage?: number;
    reductionAmount?: number;
    studentId?: string;
    student?: UserApp;
    bookings?: Booking[];
}

export interface PasswordRecoveryInput {
    userId: string;
    resetToken: string;
    password: string;
    passwordConfirmation: string;
}

export interface PasswordResetResponseDTO {
    resetToken: string;
    email: string;
    id: string;
}

export interface PasswordResetResponseDTOResponseDTO {
    message: string;
    status: number;
    data?: PasswordResetResponseDTO;
    count?: number | null;
}

export interface Slot {
    id: string;
    createdAt: Date;
    updatedAt?: Date | null;
    archivedAt?: Date | null;
    dateFrom?: Date;
    dateTo?: Date;
    teacherId?: string;
    teacher?: UserApp;
    typeId?: string;
    type?: TypeSlot;
}

export interface StatusAccount {
    id: string;
    createdAt: Date;
    updatedAt?: Date | null;
    archivedAt?: Date | null;
    name: string;
    color: string;
    icon?: string | null;
}

export interface StatusAccountDTO {
    readonly id: string;
    readonly name: string;
    readonly color: string;
    readonly icon?: string | null;
}

export interface StringResponseDTO {
    message: string;
    status: number;
    data?: string | null;
    count?: number | null;
}

export interface TypeSlot {
    id: string;
    createdAt: Date;
    updatedAt?: Date | null;
    archivedAt?: Date | null;
    name?: string | null;
    color?: string | null;
    icon?: string | null;
}

export interface UserApp {
    id?: string;
    userName?: string | null;
    normalizedUserName?: string | null;
    email?: string | null;
    normalizedEmail?: string | null;
    emailConfirmed?: boolean;
    passwordHash?: string | null;
    securityStamp?: string | null;
    concurrencyStamp?: string | null;
    phoneNumber?: string | null;
    phoneNumberConfirmed?: boolean;
    twoFactorEnabled?: boolean;
    lockoutEnd?: Date | null;
    lockoutEnabled?: boolean;
    accessFailedCount?: number;
    firstName?: string | null;
    lastName?: string | null;
    dateOfBirth?: Date;
    dataProcessingConsent?: boolean;
    privacyPolicyConsent?: boolean;
    title?: string | null;
    description?: string | null;
    archivedAt?: Date | null;
    updatedAt?: Date | null;
    createdAt?: Date;
    genderId?: string;
    gender?: Gender;
    statusId?: string;
    status?: StatusAccount;
    adresses?: Address[];
    formations?: Formation[];
    bookingsForStudent?: Booking[];
    ordersForStudent?: Order[];
    teacherCursuses?: Cursus[];
}

export interface UserCreateDTO {
    email: string;
    password: string;
    firstName: string;
    lastName: string;
    dataProcessingConsent: boolean;
    privacyPolicyConsent: boolean;
    title?: string | null;
    description?: string | null;
    phoneNumber?: string | null;
    dateOfBirth?: Date;
    roleId?: string;
    genderId?: string;
    addresses?: Address[];
    formations?: Formation[];
}

export interface UserInfosWithtoken {
    token: string;
    user: UserResponseDTO;
}

export interface UserInfosWithtokenResponseDTO {
    message: string;
    status: number;
    data?: UserInfosWithtoken;
    count?: number | null;
}

/** Modèle de données pour la connexion utilisateur */
export interface UserLoginDTO {
    /** Adresse email de l'utilisateur (format email valide requis) */
    email: string;
    /** Mot de passe (minimum 8 caractères avec majuscules, minuscules, chiffres) */
    password: string;
}

export interface UserResponseDTO {
    id: string;
    firstName: string;
    lastName: string;
    email: string;
    title?: string | null;
    description?: string | null;
    phoneNumber?: string | null;
    status?: StatusAccountDTO;
    gender?: GenderDTO;
    roles: string[];
}

export interface UserResponseDTOListResponseDTO {
    message: string;
    status: number;
    data?: UserResponseDTO[];
    count?: number | null;
}

export interface UserResponseDTOResponseDTO {
    message: string;
    status: number;
    data?: UserResponseDTO;
    count?: number | null;
}

export interface UserUpdateDTO {
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
}

/** Request Options for Angular HttpClient requests */
export interface RequestOptions<TResponseType extends 'arraybuffer' | 'blob' | 'json' | 'text'> {
    headers?: HttpHeaders;
    reportProgress?: boolean;
    responseType?: TResponseType;
    withCredentials?: boolean;
    context?: HttpContext;
}
