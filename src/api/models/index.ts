/* @ts-nocheck */
/* eslint-disable */
/* @noformat */
/* @formatter:off */
/**
* Generated by ng-openapi
* Generated TypeScript interfaces from Swagger specification
* Do not edit this file manually
*/
import { HttpContext, HttpHeaders } from "@angular/common/http";
export interface Address {
    id: string;
    createdAt: Date;
    updatedAt?: Date | null;
    archivedAt?: Date | null;
    street: string;
    city: string;
    state: string;
    country: string;
    zipCode: string;
    additionalInfo?: string | null;
    longitude?: number | null;
    latitude?: number | null;
    userId?: string;
    user?: UserApp;
}

/** DTO pour la création d'une nouvelle adresse */
export interface AddressCreateDTO {
    /** Rue de l'adresse */
    street: string;
    /** Ville */
    city: string;
    /** État/Province */
    state: string;
    /** Pays */
    country: string;
    /** Code postal */
    zipCode: string;
    /** Informations supplémentaires */
    additionalInfo?: string | null;
    /** Longitude géographique */
    longitude?: number | null;
    /** Latitude géographique */
    latitude?: number | null;
    /** Identifiant de l'utilisateur associé */
    userId: string;
}

/** DTO pour l'affichage des informations d'une adresse */
export interface AddressResponseDTO {
    /** Identifiant unique de l'adresse */
    id: string;
    /** Rue de l'adresse */
    street: string;
    /** Ville */
    city: string;
    /** État/Province */
    state: string;
    /** Pays */
    country: string;
    /** Code postal */
    zipCode: string;
    /** Informations supplémentaires */
    additionalInfo?: string | null;
    /** Longitude géographique */
    longitude?: number | null;
    /** Latitude géographique */
    latitude?: number | null;
    /** Identifiant de l'utilisateur associé */
    userId: string;
    /** Date de création de l'enregistrement */
    createdAt: Date;
    /** Date de dernière mise à jour */
    updatedAt?: Date | null;
}

export interface AddressResponseDTOListResponseDTO {
    message: string;
    status: number;
    data?: AddressResponseDTO[];
    count?: number | null;
}

export interface AddressResponseDTOResponseDTO {
    message: string;
    status: number;
    data?: AddressResponseDTO;
    count?: number | null;
}

/** DTO pour la mise à jour d'une adresse existante */
export interface AddressUpdateDTO {
    /** Rue de l'adresse */
    street: string;
    /** Ville */
    city: string;
    /** État/Province */
    state: string;
    /** Pays */
    country: string;
    /** Code postal */
    zipCode: string;
    /** Informations supplémentaires */
    additionalInfo?: string | null;
    /** Longitude géographique */
    longitude?: number | null;
    /** Latitude géographique */
    latitude?: number | null;
    /** Identifiant de l'utilisateur associé */
    userId: string;
}

export interface Booking {
    id: string;
    createdAt: Date;
    updatedAt?: Date | null;
    archivedAt?: Date | null;
    title?: string | null;
    description?: string | null;
    slotId?: string;
    slot?: Slot;
    orderId?: string;
    order?: Order;
    studentId?: string;
    student?: UserApp;
}

export interface BooleanResponseDTO {
    message: string;
    status: number;
    data?: boolean;
    count?: number | null;
}

export interface CategoryCursus {
    id: string;
    createdAt: Date;
    updatedAt?: Date | null;
    archivedAt?: Date | null;
    name: string;
    color: string;
    icon?: string | null;
    cursuses?: Cursus[];
}

/** DTO pour la création d'une nouvelle catégorie de cursus */
export interface CategoryCursusCreateDTO {
    /** Nom de la catégorie de cursus */
    name: string;
    /** Couleur associée à la catégorie de cursus (code hexadécimal) */
    color: string;
    /** Icône associée à la catégorie de cursus */
    icon?: string | null;
}

/** DTO pour la catégorie de cursus */
export interface CategoryCursusDTO {
    /** Identifiant de la catégorie */
    id: string;
    /** Nom de la catégorie */
    name: string;
    /** Couleur de la catégorie */
    color: string;
    /** Icône de la catégorie */
    icon?: string | null;
}

/** DTO pour l'affichage des informations d'une catégorie de cursus */
export interface CategoryCursusResponseDTO {
    /** Identifiant unique de la catégorie de cursus */
    id: string;
    /** Nom de la catégorie de cursus */
    name: string;
    /** Couleur associée à la catégorie de cursus (code hexadécimal) */
    color: string;
    /** Icône associée à la catégorie de cursus */
    icon?: string | null;
    /** Date de création de l'enregistrement */
    createdAt: Date;
    /** Date de dernière mise à jour */
    updatedAt?: Date | null;
}

export interface CategoryCursusResponseDTOListResponseDTO {
    message: string;
    status: number;
    data?: CategoryCursusResponseDTO[];
    count?: number | null;
}

export interface CategoryCursusResponseDTOResponseDTO {
    message: string;
    status: number;
    data?: CategoryCursusResponseDTO;
    count?: number | null;
}

/** DTO pour la mise à jour d'une catégorie de cursus existante */
export interface CategoryCursusUpdateDTO {
    /** Nom de la catégorie de cursus */
    name: string;
    /** Couleur associée à la catégorie de cursus (code hexadécimal) */
    color: string;
    /** Icône associée à la catégorie de cursus */
    icon?: string | null;
}

export interface Cursus {
    id: string;
    createdAt: Date;
    updatedAt?: Date | null;
    archivedAt?: Date | null;
    name: string;
    color: string;
    icon?: string | null;
    description?: string | null;
    imgUrl?: string | null;
    levelId?: string;
    level?: LevelCursus;
    teacherId?: string;
    teacher?: UserApp;
    categories?: CategoryCursus[];
}

/** DTO pour associer/dissocier une catégorie à un cursus */
export interface CursusCategoryDTO {
    /** Identifiant du cursus */
    cursusId: string;
    /** Identifiant de la catégorie */
    categoryId: string;
}

/** DTO pour la création d'un nouveau cursus */
export interface CursusCreateDTO {
    /** Nom du cursus */
    name: string;
    /** Couleur associée au cursus (code hexadécimal) */
    color: string;
    /** Icône associée au cursus */
    icon?: string | null;
    /** Description détaillée du cursus */
    description?: string | null;
    /** URL de l'image du cursus */
    imgUrl?: string;
    /** Identifiant du niveau du cursus */
    levelId: string;
    /** Identifiant de l'enseignant du cursus */
    teacherId: string;
    /** Liste des identifiants des catégories à associer au cursus */
    categoryIds?: string[];
}

export interface CursusDynamicFilters {
    first?: number;
    rows?: number;
    search?: string | null;
    globalSearch?: string | null;
    sorts?: Sort[];
    filters?: Record<string, FilterItem>;
}

/** DTO pour l'affichage des informations d'un cursus */
export interface CursusResponseDTO {
    /** Identifiant unique du cursus */
    id: string;
    /** Nom du cursus */
    name: string;
    /** Couleur associée au cursus (code hexadécimal) */
    color: string;
    /** Icône associée au cursus */
    icon?: string | null;
    /** Description détaillée du cursus */
    description?: string | null;
    /** URL de l'image du cursus */
    imgUrl?: string | null;
    /** Identifiant du niveau du cursus */
    levelId: string;
    level?: LevelCursusDTO;
    /** Identifiant de l'enseignant du cursus */
    teacherId: string;
    teacher?: TeacherDTO;
    /** Liste des catégories associées au cursus */
    categories?: CategoryCursusDTO[];
    /** Date de création de l'enregistrement */
    createdAt: Date;
    /** Date de dernière mise à jour */
    updatedAt?: Date | null;
}

export interface CursusResponseDTOListResponseDTO {
    message: string;
    status: number;
    data?: CursusResponseDTO[];
    count?: number | null;
}

export interface CursusResponseDTOResponseDTO {
    message: string;
    status: number;
    data?: CursusResponseDTO;
    count?: number | null;
}

/** DTO pour la mise à jour d'un cursus existant */
export interface CursusUpdateDTO {
    /** Nom du cursus */
    name: string;
    /** Couleur associée au cursus (code hexadécimal) */
    color: string;
    /** Icône associée au cursus */
    icon?: string | null;
    /** Description détaillée du cursus */
    description?: string | null;
    /** URL de l'image du cursus */
    imgUrl?: string;
    /** Identifiant du niveau du cursus */
    levelId: string;
    /** Identifiant de l'enseignant du cursus */
    teacherId: string;
    /** Liste des identifiants des catégories à associer au cursus */
    categoryIds?: string[];
}

export interface Experience {
    id: string;
    createdAt: Date;
    updatedAt?: Date | null;
    archivedAt?: Date | null;
    title: string;
    description: string;
    institution: string;
    dateFrom: Date;
    dateTo?: Date | null;
    userId?: string;
    user?: UserApp;
}

/** DTO pour la création d'une nouvelle expérience */
export interface ExperienceCreateDTO {
    /** Titre du poste/expérience */
    title: string;
    /** Description détaillée de l'expérience */
    description: string;
    /** Entreprise/Institution où l'expérience a été acquise */
    institution: string;
    /** Date de début de l'expérience */
    dateFrom: Date;
    /** Date de fin de l'expérience (optionnelle si en cours) */
    dateTo?: Date | null;
    /** Identifiant de l'utilisateur associé */
    userId: string;
}

/** DTO pour l'affichage des informations d'une expérience */
export interface ExperienceResponseDTO {
    /** Identifiant unique de l'expérience */
    id: string;
    /** Titre du poste/expérience */
    title: string;
    /** Description détaillée de l'expérience */
    description: string;
    /** Entreprise/Institution où l'expérience a été acquise */
    institution: string;
    /** Date de début de l'expérience */
    dateFrom: Date;
    /** Date de fin de l'expérience (optionnelle si en cours) */
    dateTo?: Date | null;
    /** Identifiant de l'utilisateur associé */
    userId: string;
    /** Date de création de l'enregistrement */
    createdAt: Date;
    /** Date de dernière mise à jour */
    updatedAt?: Date | null;
}

export interface ExperienceResponseDTOListResponseDTO {
    message: string;
    status: number;
    data?: ExperienceResponseDTO[];
    count?: number | null;
}

export interface ExperienceResponseDTOResponseDTO {
    message: string;
    status: number;
    data?: ExperienceResponseDTO;
    count?: number | null;
}

/** DTO pour la mise à jour d'une expérience existante */
export interface ExperienceUpdateDTO {
    /** Titre du poste/expérience */
    title: string;
    /** Description détaillée de l'expérience */
    description: string;
    /** Entreprise/Institution où l'expérience a été acquise */
    institution: string;
    /** Date de début de l'expérience */
    dateFrom: Date;
    /** Date de fin de l'expérience (optionnelle si en cours) */
    dateTo?: Date | null;
    /** Identifiant de l'utilisateur associé */
    userId: string;
}

export interface FilterItem {
    value: any | null;
    matchMode: string | null;
}

export interface ForgotPasswordInput {
    email: string;
}

export interface Formation {
    id: string;
    createdAt: Date;
    updatedAt?: Date | null;
    archivedAt?: Date | null;
    title: string;
    description: string;
    institution: string;
    dateFrom: Date;
    dateTo?: Date | null;
    userId?: string;
    user?: UserApp;
}

/** DTO pour la création d'une nouvelle formation */
export interface FormationCreateDTO {
    /** Titre de la formation */
    title: string;
    /** Description détaillée de la formation */
    description: string;
    /** Institution où la formation a été suivie */
    institution: string;
    /** Date de début de la formation */
    dateFrom: Date;
    /** Date de fin de la formation (optionnelle si en cours) */
    dateTo?: Date | null;
    /** Identifiant de l'utilisateur associé */
    userId: string;
}

/** DTO pour l'affichage des informations d'une formation */
export interface FormationResponseDTO {
    /** Identifiant unique de la formation */
    id: string;
    /** Titre de la formation */
    title: string;
    /** Description détaillée de la formation */
    description: string;
    /** Institution où la formation a été suivie */
    institution: string;
    /** Date de début de la formation */
    dateFrom: Date;
    /** Date de fin de la formation (optionnelle si en cours) */
    dateTo?: Date | null;
    /** Identifiant de l'utilisateur associé */
    userId: string;
    /** Date de création de l'enregistrement */
    createdAt: Date;
    /** Date de dernière mise à jour */
    updatedAt?: Date | null;
}

export interface FormationResponseDTOListResponseDTO {
    message: string;
    status: number;
    data?: FormationResponseDTO[];
    count?: number | null;
}

export interface FormationResponseDTOResponseDTO {
    message: string;
    status: number;
    data?: FormationResponseDTO;
    count?: number | null;
}

/** DTO pour la mise à jour d'une formation existante */
export interface FormationUpdateDTO {
    /** Titre de la formation */
    title: string;
    /** Description détaillée de la formation */
    description: string;
    /** Institution où la formation a été suivie */
    institution: string;
    /** Date de début de la formation */
    dateFrom: Date;
    /** Date de fin de la formation (optionnelle si en cours) */
    dateTo?: Date | null;
    /** Identifiant de l'utilisateur associé */
    userId: string;
}

export interface Gender {
    id: string;
    createdAt: Date;
    updatedAt?: Date | null;
    archivedAt?: Date | null;
    name: string;
    color: string;
    icon?: string | null;
}

export interface GenderDTO {
    readonly id: string;
    readonly name: string;
    readonly color: string;
    readonly icon?: string | null;
}

export interface GenderDTOListResponseDTO {
    message: string;
    status: number;
    data?: GenderDTO[];
    count?: number | null;
}

export interface Language {
    id: string;
    createdAt: Date;
    updatedAt?: Date | null;
    archivedAt?: Date | null;
    name: string;
    color: string;
    icon?: string | null;
    users?: UserApp[];
}

/** DTO pour la création d'une nouvelle langue */
export interface LanguageCreateDTO {
    /** Nom de la langue */
    name: string;
    /** Couleur associée à la langue (code hexadécimal) */
    color: string;
    /** Icône associée à la langue */
    icon?: string | null;
}

/** DTO pour l'affichage des informations d'une langue */
export interface LanguageResponseDTO {
    /** Identifiant unique de la langue */
    id: string;
    /** Nom de la langue */
    name: string;
    /** Couleur associée à la langue (code hexadécimal) */
    color: string;
    /** Icône associée à la langue */
    icon?: string | null;
    /** Date de création de l'enregistrement */
    createdAt: Date;
    /** Date de dernière mise à jour */
    updatedAt?: Date | null;
}

export interface LanguageResponseDTOListResponseDTO {
    message: string;
    status: number;
    data?: LanguageResponseDTO[];
    count?: number | null;
}

export interface LanguageResponseDTOResponseDTO {
    message: string;
    status: number;
    data?: LanguageResponseDTO;
    count?: number | null;
}

/** DTO pour la mise à jour d'une langue existante */
export interface LanguageUpdateDTO {
    /** Nom de la langue */
    name: string;
    /** Couleur associée à la langue (code hexadécimal) */
    color: string;
    /** Icône associée à la langue */
    icon?: string | null;
}

export interface LevelCursus {
    id: string;
    createdAt: Date;
    updatedAt?: Date | null;
    archivedAt?: Date | null;
    name: string;
    color: string;
    icon?: string | null;
}

/** DTO pour la création d'un nouveau niveau de cursus */
export interface LevelCursusCreateDTO {
    /** Nom du niveau de cursus */
    name: string;
    /** Couleur associée au niveau de cursus (code hexadécimal) */
    color: string;
    /** Icône associée au niveau de cursus */
    icon?: string | null;
}

/** DTO pour le niveau de cursus */
export interface LevelCursusDTO {
    /** Identifiant du niveau */
    id: string;
    /** Nom du niveau */
    name: string;
    /** Couleur du niveau */
    color: string;
    /** Icône du niveau */
    icon?: string | null;
}

/** DTO pour l'affichage des informations d'un niveau de cursus */
export interface LevelCursusResponseDTO {
    /** Identifiant unique du niveau de cursus */
    id: string;
    /** Nom du niveau de cursus */
    name: string;
    /** Couleur associée au niveau de cursus (code hexadécimal) */
    color: string;
    /** Icône associée au niveau de cursus */
    icon?: string | null;
    /** Date de création de l'enregistrement */
    createdAt: Date;
    /** Date de dernière mise à jour */
    updatedAt?: Date | null;
}

export interface LevelCursusResponseDTOListResponseDTO {
    message: string;
    status: number;
    data?: LevelCursusResponseDTO[];
    count?: number | null;
}

export interface LevelCursusResponseDTOResponseDTO {
    message: string;
    status: number;
    data?: LevelCursusResponseDTO;
    count?: number | null;
}

/** DTO pour la mise à jour d'un niveau de cursus existant */
export interface LevelCursusUpdateDTO {
    /** Nom du niveau de cursus */
    name: string;
    /** Couleur associée au niveau de cursus (code hexadécimal) */
    color: string;
    /** Icône associée au niveau de cursus */
    icon?: string | null;
}

export interface LoginOutputDTO {
    token: string;
    refreshToken: string;
    user: UserResponseDTO;
}

export interface LoginOutputDTOResponseDTO {
    message: string;
    status: number;
    data?: LoginOutputDTO;
    count?: number | null;
}

export interface ObjectResponseDTO {
    message: string;
    status: number;
    data?: any | null;
    count?: number | null;
}

export interface Order {
    id: string;
    createdAt: Date;
    updatedAt?: Date | null;
    archivedAt?: Date | null;
    orderNumber?: string | null;
    orderDate?: Date;
    totalAmount?: number;
    reductionPercentage?: number;
    reductionAmount?: number;
    studentId?: string;
    student?: UserApp;
    bookings?: Booking[];
}

export interface PasswordRecoveryInput {
    userId: string;
    resetToken: string;
    password: string;
    passwordConfirmation: string;
}

export interface PasswordResetResponseDTO {
    resetToken: string;
    email: string;
    id: string;
}

export interface PasswordResetResponseDTOResponseDTO {
    message: string;
    status: number;
    data?: PasswordResetResponseDTO;
    count?: number | null;
}

export interface ProgrammingLanguage {
    id: string;
    createdAt: Date;
    updatedAt?: Date | null;
    archivedAt?: Date | null;
    name: string;
    color: string;
    icon?: string | null;
    description?: string | null;
    users?: UserApp[];
}

/** DTO pour la création d'un nouveau langage de programmation */
export interface ProgrammingLanguageCreateDTO {
    /** Nom du langage de programmation */
    name: string;
    /** Couleur associée au langage (code hexadécimal) */
    color: string;
    /** Icône associée au langage */
    icon?: string | null;
    /** Description du langage de programmation */
    description?: string | null;
}

/** DTO pour l'affichage des informations d'un langage de programmation */
export interface ProgrammingLanguageResponseDTO {
    /** Identifiant unique du langage de programmation */
    id: string;
    /** Nom du langage de programmation */
    name: string;
    /** Couleur associée au langage (code hexadécimal) */
    color: string;
    /** Icône associée au langage */
    icon?: string | null;
    /** Description du langage de programmation */
    description?: string | null;
    /** Date de création de l'enregistrement */
    createdAt: Date;
    /** Date de dernière mise à jour */
    updatedAt?: Date | null;
}

export interface ProgrammingLanguageResponseDTOListResponseDTO {
    message: string;
    status: number;
    data?: ProgrammingLanguageResponseDTO[];
    count?: number | null;
}

export interface ProgrammingLanguageResponseDTOResponseDTO {
    message: string;
    status: number;
    data?: ProgrammingLanguageResponseDTO;
    count?: number | null;
}

/** DTO pour la mise à jour d'un langage de programmation existant */
export interface ProgrammingLanguageUpdateDTO {
    /** Nom du langage de programmation */
    name: string;
    /** Couleur associée au langage (code hexadécimal) */
    color: string;
    /** Icône associée au langage */
    icon?: string | null;
    /** Description du langage de programmation */
    description?: string | null;
}

export interface Slot {
    id: string;
    createdAt: Date;
    updatedAt?: Date | null;
    archivedAt?: Date | null;
    dateFrom?: Date;
    dateTo?: Date;
    teacherId?: string;
    teacher?: UserApp;
    typeId?: string;
    type?: TypeSlot;
}

/** DTO pour la création d'un nouveau créneau */
export interface SlotCreateDTO {
    /** Date et heure de début du créneau */
    dateFrom: Date;
    /** Date et heure de fin du créneau */
    dateTo: Date;
    /** Identifiant de l'enseignant */
    teacherId: string;
    /** Identifiant du type de créneau */
    typeId: string;
}

/** DTO pour l'affichage des informations d'un créneau */
export interface SlotResponseDTO {
    /** Identifiant unique du créneau */
    id: string;
    /** Date et heure de début du créneau */
    dateFrom: Date;
    /** Date et heure de fin du créneau */
    dateTo: Date;
    /** Identifiant de l'enseignant */
    teacherId: string;
    teacher?: UserResponseDTO;
    /** Identifiant du type de créneau */
    typeId: string;
    type?: TypeSlotResponseDTO;
    /** Date de création de l'enregistrement */
    createdAt: Date;
    /** Date de dernière mise à jour */
    updatedAt?: Date | null;
    /** Indique si le créneau est disponible (non réservé) */
    isAvailable?: boolean;
}

export interface SlotResponseDTOListResponseDTO {
    message: string;
    status: number;
    data?: SlotResponseDTO[];
    count?: number | null;
}

export interface SlotResponseDTOResponseDTO {
    message: string;
    status: number;
    data?: SlotResponseDTO;
    count?: number | null;
}

/** DTO pour la mise à jour d'un créneau existant */
export interface SlotUpdateDTO {
    /** Date et heure de début du créneau */
    dateFrom: Date;
    /** Date et heure de fin du créneau */
    dateTo: Date;
    /** Identifiant de l'enseignant */
    teacherId: string;
    /** Identifiant du type de créneau */
    typeId: string;
}

export interface Sort {
    field?: string | null;
    order?: number;
}

export interface StatusAccount {
    id: string;
    createdAt: Date;
    updatedAt?: Date | null;
    archivedAt?: Date | null;
    name: string;
    color: string;
    icon?: string | null;
}

export interface StatusAccountDTO {
    readonly id: string;
    readonly name: string;
    readonly color: string;
    readonly icon?: string | null;
}

export interface StringResponseDTO {
    message: string;
    status: number;
    data?: string | null;
    count?: number | null;
}

/** DTO pour l'enseignant simplifié */
export interface TeacherDTO {
    /** Identifiant de l'enseignant */
    id: string;
    /** Prénom de l'enseignant */
    firstName: string;
    /** Nom de famille de l'enseignant */
    lastName: string;
    /** Email de l'enseignant */
    email: string;
    /** Titre de l'enseignant */
    title?: string | null;
}

export interface TypeSlot {
    id: string;
    createdAt: Date;
    updatedAt?: Date | null;
    archivedAt?: Date | null;
    name?: string | null;
    color?: string | null;
    icon?: string | null;
}

/** DTO pour la création d'un nouveau type de créneau */
export interface TypeSlotCreateDTO {
    /** Nom du type de créneau */
    name: string;
    /** Couleur associée au type de créneau (code hexadécimal) */
    color: string;
    /** Icône associée au type de créneau */
    icon?: string | null;
}

/** DTO pour l'affichage des informations d'un type de créneau */
export interface TypeSlotResponseDTO {
    /** Identifiant unique du type de créneau */
    id: string;
    /** Nom du type de créneau */
    name: string;
    /** Couleur associée au type de créneau (code hexadécimal) */
    color: string;
    /** Icône associée au type de créneau */
    icon?: string | null;
    /** Date de création de l'enregistrement */
    createdAt: Date;
    /** Date de dernière mise à jour */
    updatedAt?: Date | null;
}

export interface TypeSlotResponseDTOListResponseDTO {
    message: string;
    status: number;
    data?: TypeSlotResponseDTO[];
    count?: number | null;
}

export interface TypeSlotResponseDTOResponseDTO {
    message: string;
    status: number;
    data?: TypeSlotResponseDTO;
    count?: number | null;
}

/** DTO pour la mise à jour d'un type de créneau existant */
export interface TypeSlotUpdateDTO {
    /** Nom du type de créneau */
    name: string;
    /** Couleur associée au type de créneau (code hexadécimal) */
    color: string;
    /** Icône associée au type de créneau */
    icon?: string | null;
}

export interface UserApp {
    id?: string;
    userName?: string | null;
    normalizedUserName?: string | null;
    email?: string | null;
    normalizedEmail?: string | null;
    emailConfirmed?: boolean;
    passwordHash?: string | null;
    securityStamp?: string | null;
    concurrencyStamp?: string | null;
    phoneNumber?: string | null;
    phoneNumberConfirmed?: boolean;
    twoFactorEnabled?: boolean;
    lockoutEnd?: Date | null;
    lockoutEnabled?: boolean;
    accessFailedCount?: number;
    firstName?: string | null;
    lastName?: string | null;
    dateOfBirth?: Date;
    dataProcessingConsent?: boolean;
    privacyPolicyConsent?: boolean;
    title?: string | null;
    description?: string | null;
    archivedAt?: Date | null;
    updatedAt?: Date | null;
    createdAt?: Date;
    genderId?: string;
    gender?: Gender;
    statusId?: string;
    status?: StatusAccount;
    adresses?: Address[];
    formations?: Formation[];
    experiences?: Experience[];
    bookingsForStudent?: Booking[];
    ordersForStudent?: Order[];
    teacherCursuses?: Cursus[];
    languages?: Language[];
    programmingLanguages?: ProgrammingLanguage[];
}

export interface UserCreateDTO {
    email: string;
    password: string;
    firstName: string;
    lastName: string;
    dataProcessingConsent: boolean;
    privacyPolicyConsent: boolean;
    title?: string | null;
    description?: string | null;
    phoneNumber?: string | null;
    dateOfBirth?: Date;
    roleId?: string;
    genderId?: string;
    addresses?: Address[];
    formations?: Formation[];
}

export interface UserInfosWithtoken {
    token: string;
    user: UserResponseDTO;
}

export interface UserInfosWithtokenResponseDTO {
    message: string;
    status: number;
    data?: UserInfosWithtoken;
    count?: number | null;
}

/** DTO pour associer/dissocier une langue à un utilisateur */
export interface UserLanguageDTO {
    /** Identifiant de l'utilisateur */
    userId: string;
    /** Identifiant de la langue */
    languageId: string;
}

/** Modèle de données pour la connexion utilisateur */
export interface UserLoginDTO {
    /** Adresse email de l'utilisateur (format email valide requis) */
    email: string;
    /** Mot de passe (minimum 8 caractères avec majuscules, minuscules, chiffres) */
    password: string;
}

/** DTO pour associer/dissocier un langage de programmation à un utilisateur */
export interface UserProgrammingLanguageDTO {
    /** Identifiant de l'utilisateur */
    userId: string;
    /** Identifiant du langage de programmation */
    programmingLanguageId: string;
}

export interface UserResponseDTO {
    id: string;
    firstName: string;
    lastName: string;
    email: string;
    dateOfBirth?: Date;
    title?: string | null;
    description?: string | null;
    phoneNumber?: string | null;
    status?: StatusAccountDTO;
    gender?: GenderDTO;
    roles: string[];
}

export interface UserResponseDTOListResponseDTO {
    message: string;
    status: number;
    data?: UserResponseDTO[];
    count?: number | null;
}

export interface UserResponseDTOResponseDTO {
    message: string;
    status: number;
    data?: UserResponseDTO;
    count?: number | null;
}

export interface UserUpdateDTO {
    firstName: string;
    lastName: string;
    dateOfBirth: Date;
    title?: string | null;
    description?: string | null;
    phoneNumber?: string | null;
    languagesIds?: string[];
    programmingLanguagesIds?: string[];
}

/** Request Options for Angular HttpClient requests */
export interface RequestOptions<TResponseType extends 'arraybuffer' | 'blob' | 'json' | 'text'> {
    headers?: HttpHeaders;
    reportProgress?: boolean;
    responseType?: TResponseType;
    withCredentials?: boolean;
    context?: HttpContext;
}
